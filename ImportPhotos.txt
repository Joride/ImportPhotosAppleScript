set fileTypesToSkip to ["asf", "ASF", "pps", "ibooks", "iba", "plist", "html", "dv", "mp4_original", "ini", "avi", "db"]set importFolder to choose folderset POSIXPathToPhotosFolder to POSIX path of importFolderset validYearNames to "" as listrepeat with aNumber from 1900 to 2100	set aNumberAsText to aNumber as text	set end of validYearNames to aNumberAsTextend repeatset validMonthNames to [¬	"01 - Januari", ¬	"02 - Februari", ¬	"03 - Maart", ¬	"04 - April", ¬	"05 - Mei", ¬	"06 - Juni", ¬	"07 - Juli", ¬	"08 - Augustus", ¬	"09 - September", ¬	"10 - Oktober", ¬	"11 - November", ¬	"12 - December"]set output to ""set noCreationList to {}-- check that the folder contains only valid subfolderswith timeout of 360000 seconds -- 100 hours	tell application "Finder"		set yearFolders to every folder of importFolder		repeat with aYearFolder in yearFolders			set yearFolderName to (name of aYearFolder) as text		end repeat	end tell		tell application "Finder"				set yearFolders to every folder of importFolder		repeat with aYearFolder in yearFolders			set yearFolderName to (name of aYearFolder) as text			--log "../ " & yearFolderName						if validYearNames does not contain yearFolderName then				set errorMessage to "Wrong yearfolder: " & yearFolderName				display alert errorMessage message "Aborting"			else				set monthFolders to every folder of aYearFolder				repeat with aMontFolder in monthFolders					set monthFolderName to (name of aMontFolder) as text					log yearFolderName & "/" & monthFolderName										if validMonthNames does not contain monthFolderName then						set errorMessage to "Wrong monthFolder: " & monthFolderName						display alert errorMessage message "Erroneous monthFolder: " & monthFolderName					else						set eventFolders to every folder of aMontFolder												repeat with anEventFolder in eventFolders							set eventFolderName to (name of anEventFolder) as text							log "	/" & eventFolderName														-- construct the date based on folder structure							set folderBasedDate to my dateFromFolderNames(yearFolderName, monthFolderName, eventFolderName)							if folderBasedDate is not missing value then -- this can happen for folders not matching the convention (e.g. "Films")																set fotoFiles to (every file of anEventFolder whose name extension is not in fileTypesToSkip) as alias list								set eventPathAsString to yearFolderName & "/" & monthFolderName & "/" & eventFolderName & "
"								if (count of fotoFiles) is greater than 0 then									repeat with aFotoFile in fotoFiles																				set fileName to name of aFotoFile										--log "		/" & fileName																				-- get the filecreation date										set fileCreationDate to creation date of aFotoFile																				-- get the exifcreationdate										set pathToThisItem to POSIXPathToPhotosFolder & "/" & name of aYearFolder & "/" & name of aMontFolder & "/" & name of anEventFolder & "/" & name of aFotoFile										set exifCreationDate to my exifCreationDateFromFileAtPath(pathToThisItem)																				(* 
									## assume the folder date to be the truth
									
									1.	filecreationDate matches folderBasedDate and 
										exifdate matches folderDate
										A:	times of dates are equal
											>	do nothing
										B:	times are not equal
											> update fileCreationDate with exifCreationDate

									2.	exifdate present:
											A:	exif does not match folderDate, 
												filecreation matches folderDate:
												>	update exif with fileCreationDate
											B:	exif matches folderDate, 
												filecreation does not match folderDate:
												>	update filecreation with exif
											C:	both exif and filecreation do not match folderBasedDate
												x	filecreation and exif match with eachother
													>	manual work required
												y 	filecreation and exif do not match with eachother
													>	update exif and filecreation with folderBasedDate
												
									3.	exif absent:
											A:	filecreation correct:
												>	update exif with filecreationdate
											B:	filecreation incorrect:
												>	update filecreation and exifdate with
													folderdate + default time (12:04 PM)
									*)																				set statusString to "❓"										if not (my areDatesEqual(fileCreationDate, folderBasedDate) ¬											and my areDatesEqual(exifCreationDate, folderBasedDate)) then																						if exifCreationDate is not missing value then												if my areDatesEqual(fileCreationDate, folderBasedDate) and ¬													not my areDatesEqual(exifCreationDate, folderBasedDate) then																										my creationDateToExifDateForFileAtPath(pathToThisItem, fileCreationDate)													set statusString to "➖2A: exif < filecreation➖"												end if																								if my areDatesEqual(exifCreationDate, folderBasedDate) and ¬													not my areDatesEqual(fileCreationDate, folderBasedDate) then																										my exifDateToFileCreationDateForFileAtPath(pathToThisItem, exifCreationDate)													set statusString to "➖2B: filecreation < exif➖"												end if																								if (not my areDatesEqual(exifCreationDate, folderBasedDate)) and ¬													(not my areDatesEqual(fileCreationDate, folderBasedDate)) then																										if my areDatesEqual(fileCreationDate, exifCreationDate) and ¬														not my hasDateZeroMinutesAndZeroSeconds(fileCreationDate) and ¬														not my hasDateZeroMinutesAndZeroSeconds(exifCreationDate) then														-- use the time of the creation date, use the date that of the folder to update														my setExifAndCreationWithTimeDateAndDateDate(pathToThisItem, fileCreationDate, folderBasedDate)														set statusString to "➖2Cx: exif  < folderDate / creationTime➖"													else														set statusString to "➖2Cy: exif and creation < folderDate (12:12:12)➖"														my folderDateToExifAndCreationDateForFileAtPath(pathToThisItem, folderBasedDate)													end if												end if																							else												if my areDatesEqual(fileCreationDate, folderBasedDate) then													set statusString to "➖3A: exif < filecreation➖"													my creationDateToExifDateForFileAtPath(pathToThisItem, fileCreationDate)												else													my folderDateToExifAndCreationDateForFileAtPath(pathToThisItem, folderBasedDate)													set statusString to "➖3B: exif and creation < folderDate➖"												end if																							end if										else											if my areTimesEqual(fileCreationDate, exifCreationDate) then												set statusString to "➖4A: ✅➖"											else												if exifCreationDate is not missing value then													my exifDateToFileCreationDateForFileAtPath(pathToThisItem, exifCreationDate)													set statusString to "➖4B: filecreation < exif➖"												else													my folderDateToExifAndCreationDateForFileAtPath(pathToThisItem, folderBasedDate)													set statusString to "➖4C: exif and creation < folderDate➖"												end if											end if																					end if																				set folderBasedDateString to folderBasedDate as text										set folderBasedDateString to text 1 thru -9 of folderBasedDateString																				if statusString is not "➖4A: ✅➖" then											log statusString & "		/" & fileName & "	-	" & folderBasedDateString & "	-	" & fileCreationDate & "		-	" & exifCreationDate											log "="											log "="										end if																				if name of aFotoFile contains "original" or ¬											name of aFotoFile contains ".db" then											log "deleting: " & name of aFotoFile											delete aFotoFile										end if									end repeat								end if							end if						end repeat					end if				end repeat			end if		end repeat	end tell		log "noCreationList:"	log noCreationList	log "-- END OF SCRIPT --"end timeouton isYearOfDate1970(aDate)	if aDate is missing value then		return false	else		return ((year of aDate as integer) is equal to 1970)	end ifend isYearOfDate1970on updateExifDateWithDate(fileAtPath, newDate) --	try		set yearText to (year of newDate as text)	on error errStr number errorNumber		log "ERROR in updateExifDateWithDate(" & fileAtPath & ", " & newDate & "): " & errStr & "code: " & errorNumber	end try		set monthText to my twoDigitsNumberAsTextFrom(month of newDate as integer)	set dayText to my twoDigitsNumberAsTextFrom(day of newDate as integer)	set hoursText to my twoDigitsNumberAsTextFrom(hours of newDate as integer)	set minutesText to my twoDigitsNumberAsTextFrom(minutes of newDate as integer)	set secondsText to my twoDigitsNumberAsTextFrom(seconds of newDate as integer)		set dateTime to yearText & ":" & monthText & ":" & dayText & " " & hoursText & ":" & minutesText & ":" & secondsText		set quoteChar to "\""	set exifCommand1 to "/usr/local/bin/exiftool -overwrite_original '-DateTimeOriginal =" & dateTime & "'" & " " & quoteChar & fileAtPath & quoteChar	set exifCommand2 to "/usr/local/bin/exiftool -overwrite_original '-ModifyDate =" & dateTime & "'" & " " & quoteChar & fileAtPath & quoteChar	set exifCommand3 to "/usr/local/bin/exiftool -overwrite_original '-CreateDate=" & dateTime & "'" & " " & quoteChar & fileAtPath & quoteChar	set exifCommand4 to "/usr/local/bin/exiftool -overwrite_original '-TrackCreateDate =" & dateTime & "'" & " " & quoteChar & fileAtPath & quoteChar	set exifCommand5 to "/usr/local/bin/exiftool -overwrite_original '-TrackModifyDate =" & dateTime & "'" & " " & quoteChar & fileAtPath & quoteChar	set exifCommand6 to "/usr/local/bin/exiftool -overwrite_original '-MediaCreateDate =" & dateTime & "'" & " " & quoteChar & fileAtPath & quoteChar	set exifCommand7 to "/usr/local/bin/exiftool -overwrite_original '-MediaModifyDate =" & dateTime & "'" & " " & quoteChar & fileAtPath & quoteChar			log "updateExifDateWithDate(" & fileAtPath & ", " & newDate & "):" & "
" & exifCommand1 & "
" & exifCommand2 & "
"	try		do shell script exifCommand1 --with administrator privileges		--do shell script exifCommand2 with administrator privileges		--do shell script exifCommand3 with administrator privileges		--do shell script exifCommand4 with administrator privileges		--do shell script exifCommand5 with administrator privileges		--do shell script exifCommand6 with administrator privileges	on error errStr number errorNumber		log "ERROR in updateExifDateWithDate(" & fileAtPath & ", " & newDate & "): " & errStr & "code: " & errorNumber	end try	end updateExifDateWithDateon updateCreationDate(fileAtPath, newDate)	set yearText to (year of newDate as text)	set monthText to my twoDigitsNumberAsTextFrom(month of newDate as integer)	set dayText to my twoDigitsNumberAsTextFrom(day of newDate as integer)	set hoursText to my twoDigitsNumberAsTextFrom(hours of newDate as integer)	set minutesText to my twoDigitsNumberAsTextFrom(minutes of newDate as integer)		set quoteChar to "\""	set shellCommand1 to "touch -mt 210001010101 " & quoteChar & fileAtPath & quoteChar	set shellCommand2 to "touch -mt " & yearText & monthText & dayText & hoursText & minutesText & " " & quoteChar & fileAtPath & quoteChar		log "updateCreationDate(" & fileAtPath & ", " & newDate & "):" & "
" & shellCommand1 & "
" & shellCommand2 & "
"	try		do shell script shellCommand1 --with administrator privileges		do shell script shellCommand2 --with administrator privileges	on error errStr number errorNumber		log "ERROR in updateCreationDate(" & filePath & ", " & newDate & "): " & errStr & "code: " & errorNumber	end try	end updateCreationDateon twoDigitsNumberAsTextFrom(integerValue)	set integerText to (integerValue as text)	if length of integerText is 1 then		set integerText to "0" & integerText	end if	return integerTextend twoDigitsNumberAsTextFromon dateFromTimeDateAndDateDate(timeDate, dateDate)	set aDate to current date	set seconds of aDate to seconds of timeDate	set minutes of aDate to minutes of timeDate	set hours of aDate to hours of timeDate	set day of aDate to day of dateDate	set month of aDate to month of dateDate	set year of aDate to year of dateDate	return aDateend dateFromTimeDateAndDateDateon updateExifDateWithDateAndTime(fileAtPath, timeDate, dateDate)	set theDate to my dateFromTimeDateAndDateDate(timeDate, dateDate)	updateExifDateWithDate(fileAtPath, theDate)	updateCreationDate(fileAtPath, theDate)end updateExifDateWithDateAndTimeon setExifAndCreationWithTimeDateAndDateDate(pathToFile, timeDate, dateDate)	set theDate to my dateFromTimeDateAndDateDate(timeDate, dateDate)	updateExifDateWithDate(pathToFile, theDate)	updateCreationDate(pathToFile, theDate)end setExifAndCreationWithTimeDateAndDateDateon exifDateToFileCreationDateForFileAtPath(filePath, exifDate)	updateCreationDate(filePath, exifDate)end exifDateToFileCreationDateForFileAtPathon creationDateToExifDateForFileAtPath(filePath, creationDate)	updateExifDateWithDate(filePath, creationDate)	updateCreationDate(filePath, creationDate)end creationDateToExifDateForFileAtPathon folderDateToExifAndCreationDateForFileAtPath(filePath, folderDate)	updateExifDateWithDate(filePath, folderDate)	updateCreationDate(filePath, folderDate)end folderDateToExifAndCreationDateForFileAtPathon hasDateZeroMinutesAndZeroSeconds(theDate)	return ((seconds of theDate is equal to 0) and (minutes of theDate is equal to 0))end hasDateZeroMinutesAndZeroSecondson areDatesInDifferentYears(date1, date2)	set yearDifference to (((year of date1) as integer) - ((year of date2) as integer))		return (yearDifference is not 0)end areDatesInDifferentYearson areTimesEqual(date1, date2)	if (date1 is missing value) or ¬		(date2 is missing value) then		return false	end if		return (hours of date1 is equal to hours of date2) and ¬		(minutes of date1 is equal to minutes of date2)end areTimesEqualon areDatesEqual(date1, date2)		if (date1 is missing value) or ¬		(date2 is missing value) then		return false	end if		return (year of date1 is equal to year of date2) and ¬		(month of date1 is equal to month of date2) and ¬		(day of date1 is equal to day of date2)end areDatesEqualon exifCreationDateFromFileAtPath(filePath)	set getExifCreationDateCommand to "/usr/local/bin/exiftool -DateTimeOriginal -s -s -s -T " & "\"" & filePath & "\""		try		set exifCreationDate to do shell script getExifCreationDateCommand	on error errStr number errorNumber		-- middle of the month		log "ERROR in exifCreationDateFromFileAtPath(" & filePath & "): " & errStr & "code: " & errorNumber		return missing value	end try		if exifCreationDate is "-" then		return missing value	else if exifCreationDate is "0000:00:00 00:00:00" then		set theDate to current date				set year of theDate to 1970		set month of theDate to 1		set day of theDate to 1		set hours of theDate to 0		set minutes of theDate to 0		set seconds of theDate to 0				return theDate	else		set theDate to current date				set exifYear to (text 1 thru 4 of exifCreationDate) as integer		set exifMonth to (text 6 thru 7 of exifCreationDate) as integer		set exifDay to (text 9 thru 10 of exifCreationDate) as integer		set exifHours to (text 12 thru 13 of exifCreationDate) as integer		set exifMinutes to (text 15 thru 16 of exifCreationDate) as integer		set exifSeconds to (text 18 thru 19 of exifCreationDate) as integer				set year of theDate to exifYear		set month of theDate to exifMonth		set day of theDate to exifDay		set hours of theDate to exifHours		set minutes of theDate to exifMinutes		set seconds of theDate to exifSeconds		return theDate	end if	end exifCreationDateFromFileAtPath-- input is three strings, output is dateon dateFromFolderNames(yearFolder, monthFolder, eventFolder)		set correctYear to yearFolder as integer	-- get only the number	set correctMonth to (text 1 thru 2 of monthFolder) as integer	-- get only the number, if not possible, keep it as is	try		set correctDay to (text 1 thru 2 of eventFolder) as integer	on error errStr number errorNumber		-- middle of the month		log "ERROR in dateFromFolderNames(" & yearFolder & ", " & monthFolder & ", " & eventFolder & "): " & errStr & "code: " & errorNumber		set correctDay to 15		return missing value	end try		set correctDate to current date		if correctYear is 0 then		log "WOW!" & yearFolder & "/" & monthFolder & "/" & eventFolder	end if	set year of correctDate to correctYear	set month of correctDate to correctMonth	set day of correctDate to correctDay	set hours of correctDate to 12	set minutes of correctDate to 12	set seconds of correctDate to 12		return correctDateend dateFromFolderNames